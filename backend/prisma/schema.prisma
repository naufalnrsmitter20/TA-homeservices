generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  name      String?
  email     String      @unique
  password  String?
  role      Role        @default(CUSTOMER)
  Transaksi Transaksi[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Cart      Cart[]
}

model Employee {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  phone     String?
  position  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Transaksi Transaksi[]
}

model ServicesType {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id             Int           @id @default(autoincrement())
  cartId         Int?
  servicesTypeId Int?
  name           String
  description    String?
  attachment     String?
  price          Int           @default(0)
  ServicesType   ServicesType? @relation(fields: [servicesTypeId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Cart           Cart?         @relation(fields: [cartId], references: [id])
}

model Cart {
  id          Int       @id @default(autoincrement())
  userId      Int       
  totalAmount Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
  service     Service[]
  transaksi Transaksi? @relation("cartToTransaction")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transaksi {
  id                Int               @id @default(autoincrement())
  userId            Int
  employeeId        Int?
  employee          Employee?          @relation(fields: [employeeId], references: [id])
  transactionStatus Status            @default(PENDING)
  paymentStatus     PaymentStatus     @default(UNPAID)
  totalAmount       Int               @default(0)
  paymentMethod     PaymentMethod     @default(CASH)
  transactionDate   DateTime          @default(now())
  invoiceNumber     String            @unique @default(cuid())
  notes             String?           @db.Text
  user              User              @relation(fields: [userId], references: [id])
  DetailTransaksi   DetailTransaksi[] @relation("TransaksiToDetailTransaksi")
  cartId           Int? @unique
  cart Cart?  @relation("cartToTransaction", fields: [cartId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model DetailTransaksi {
  id           Int       @id @default(autoincrement())
  servicesId   Int
  serviceName  String
  servicePrice Int       @default(0)
  transaksiId  Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Transaksi    Transaksi @relation("TransaksiToDetailTransaksi", fields: [transaksiId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  ADMIN
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  CASH
}

enum Status {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentStatus {
  PAID
  UNPAID
  REFUNDED
  CANCELLED
}
